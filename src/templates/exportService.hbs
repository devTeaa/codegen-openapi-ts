{{>header}}

{{#if imports}}
{{#each imports}}
import type { {{{this}}} } from '../models/{{{this}}}';
{{/each}}
{{/if}}
{{#if @root.appendTemplate}}
{{{@root.appendTemplate}}}
{{/if}}

{{#each operations}}
export interface {{capitalizeFirstLetter name}} {
  {{#hasLength results}}response: {{>result}}{{/hasLength}}
  {{#hasLength parameters}}
  request: {
    {{>parametersType}}
  }
  {{/hasLength}}
}
{{/each}}

export const {{{name}}}{{{@root.postfix}}}Url = {
  {{#each operations}}
  {{#hasProperty parameters 'path'}}{{capitalizeFirstLetter name}}: ({ {{#each parameters}}{{#equals in 'path'}}
    {{{name}}}{{>isRequired}},{{/equals}}{{/each}}
  }: { {{#each parameters}}{{#equals in 'path'}}
      {{{name}}}{{>isRequired}}: {{>type}}{{#if default}} = {{{default}}}{{/if}}{{/equals}}{{/each}}
  }) => `{{{registerParam path}}}`,{{else}}{{capitalizeFirstLetter name}}: '{{path}}',{{/hasProperty}}
  {{/each}}
}


{{#if @root.appendTemplate}}
export const {{{name}}}{{{@root.postfix}}}Api = {
  {{#each operations}}
  {{name}}: ({{#hasLength parameters}}data: {{capitalizeFirstLetter name}}['request']{{/hasLength}}) => httpApi.{{mapHttpApiMethod name}}<{{capitalizeFirstLetter name}}['response']>({
    url: `{{prefixHttpApiMethodParam path}}`{{#hasProperty parameters 'query'}},
    queryParams: data.query{{/hasProperty}}{{#hasProperty parameters 'body'}},
    body: data.body{{/hasProperty}}
  }),
  {{/each}}
}
{{/if}}

{{!-- 
export class {{{name}}}{{{@root.postfix}}} {
	{{#each operations}}
	/**
	{{#if deprecated}}
	 * @deprecated
	{{/if}}
	{{#if summary}}
	 * {{{escapeComment summary}}}
	{{/if}}
	{{#if description}}
	 * {{{escapeComment description}}}
	{{/if}}
	{{#unless @root.useOptions}}
	{{#if parameters}}
	{{#each parameters}}
	 * @param {{{name}}} {{#if description}}{{{escapeComment description}}}{{/if}}
	{{/each}}
	{{/if}}
	{{/unless}}
	{{#each results}}
	 * @returns {{{type}}} {{#if description}}{{{escapeComment description}}}{{/if}}
	{{/each}}
	 * @throws ApiError
	 */
	{{#if @root.exportClient}}
	{{#equals @root.httpClient 'angular'}}
	public {{{name}}}({{>parameters}}): Observable<{{>result}}> {
		return this.httpRequest.request({
	{{else}}
	public {{{name}}}({{>parameters}}): CancelablePromise<{{>result}}> {
		return this.httpRequest.request({
	{{/equals}}
	{{else}}
	{{#equals @root.httpClient 'angular'}}
	public {{{name}}}({{>parameters}}): Observable<{{>result}}> {
		return __request(OpenAPI, this.http, {
	{{else}}
	public static {{{name}}}({{>parameters}}): CancelablePromise<{{>result}}> {
		return __request(OpenAPI, {
	{{/equals}}
	{{/if}}
			method: '{{{method}}}',
			url: '{{{path}}}',
			{{#if parametersPath}}
			path: {
				{{#each parametersPath}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersCookie}}
			cookies: {
				{{#each parametersCookie}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersHeader}}
			headers: {
				{{#each parametersHeader}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersQuery}}
			query: {
				{{#each parametersQuery}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersForm}}
			formData: {
				{{#each parametersForm}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersBody}}
			{{#equals parametersBody.in 'formData'}}
			formData: {{{parametersBody.name}}},
			{{/equals}}
			{{#equals parametersBody.in 'body'}}
			body: {{{parametersBody.name}}},
			{{/equals}}
			{{#if parametersBody.mediaType}}
			mediaType: '{{{parametersBody.mediaType}}}',
			{{/if}}
			{{/if}}
			{{#if responseHeader}}
			responseHeader: '{{{responseHeader}}}',
			{{/if}}
			{{#if errors}}
			errors: {
				{{#each errors}}
				{{{code}}}: `{{{escapeDescription description}}}`,
				{{/each}}
			},
			{{/if}}
		});
	}

	{{/each}}
} --}}
