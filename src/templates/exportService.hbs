{{>header}}

{{#if imports}}
{{#each imports}}
import type { {{{this}}} } from '../models/{{{this}}}';
{{/each}}
{{/if}}
{{#if @root.appendTemplate}}
{{{@root.appendTemplate}}}
{{/if}}

{{#each operations}}
export interface {{capitalizeFirstLetter name}} {
  {{#hasLength results}}response: {{unionTypeBesideAny results}}{{/hasLength}}
  {{#hasLength parameters}}
  request: {
    {{>parametersType}}
  }
  {{/hasLength}}
}
{{/each}}

export const {{{name}}}{{{@root.postfix}}}Url = {
  {{#each operations}}
  {{#hasLength parameters}}
  {{#hasProperty parameters 'path'}}
  {{capitalizeFirstLetter name}}: ({ {{#each parameters}}{{#equals in 'path'}}
    {{{name}}}{{>isRequired}},{{/equals}}{{/each}}
  }: { 
    {{#each parameters}}{{#equals in 'path'}}{{{name}}}{{>isRequired}}: {{>type}}{{#if default}} = {{{default}}}{{/if}}{{/equals}}{{/each}}
  }) => `{{path}}`,
  {{else}}
  {{/hasProperty}}
  {{/hasLength}}
  {{capitalizeFirstLetter name}}: '{{path}}',
  {{/each}}
}

{{#if @root.appendTemplate}}
export const {{{name}}}{{{@root.postfix}}}Api = {
  {{#each operations}}
  {{name}}: ({{#hasLength parameters}}data: {{capitalizeFirstLetter name}}['request']{{/hasLength}}) => httpApi.{{mapHttpApiMethod name}}<{{capitalizeFirstLetter name}}['response']>({
    url: `{{prefixHttpApiMethodParam path}}`{{#hasProperty parameters 'query'}},
    queryParams: data.query{{/hasProperty}}{{#hasProperty parameters 'body'}},
    body: data.body{{/hasProperty}}
  }),
  {{/each}}
}
{{/if}}
