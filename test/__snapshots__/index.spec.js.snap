// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`v2 should generate: ./test/generated/v2/index.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type { ArrayWithArray } from './models/ArrayWithArray';
export type { ArrayWithBooleans } from './models/ArrayWithBooleans';
export type { ArrayWithNumbers } from './models/ArrayWithNumbers';
export type { ArrayWithProperties } from './models/ArrayWithProperties';
export type { ArrayWithReferences } from './models/ArrayWithReferences';
export type { ArrayWithStrings } from './models/ArrayWithStrings';
export type { Date } from './models/Date';
export type { DictionaryWithArray } from './models/DictionaryWithArray';
export type { DictionaryWithDictionary } from './models/DictionaryWithDictionary';
export type { DictionaryWithProperties } from './models/DictionaryWithProperties';
export type { DictionaryWithReference } from './models/DictionaryWithReference';
export type { DictionaryWithString } from './models/DictionaryWithString';
export type { EnumFromDescription } from './models/EnumFromDescription';
export { EnumWithExtensions } from './models/EnumWithExtensions';
export { EnumWithNumbers } from './models/EnumWithNumbers';
export { EnumWithStrings } from './models/EnumWithStrings';
export type { ModelThatExtends } from './models/ModelThatExtends';
export type { ModelThatExtendsExtends } from './models/ModelThatExtendsExtends';
export type { ModelWithArray } from './models/ModelWithArray';
export type { ModelWithBoolean } from './models/ModelWithBoolean';
export type { ModelWithCircularReference } from './models/ModelWithCircularReference';
export type { ModelWithDictionary } from './models/ModelWithDictionary';
export type { ModelWithDuplicateImports } from './models/ModelWithDuplicateImports';
export type { ModelWithDuplicateProperties } from './models/ModelWithDuplicateProperties';
export { ModelWithEnum } from './models/ModelWithEnum';
export { ModelWithEnumFromDescription } from './models/ModelWithEnumFromDescription';
export type { ModelWithInteger } from './models/ModelWithInteger';
export type { ModelWithNestedEnums } from './models/ModelWithNestedEnums';
export type { ModelWithNestedProperties } from './models/ModelWithNestedProperties';
export type { ModelWithNullableString } from './models/ModelWithNullableString';
export type { ModelWithOrderedProperties } from './models/ModelWithOrderedProperties';
export type { ModelWithPattern } from './models/ModelWithPattern';
export type { ModelWithProperties } from './models/ModelWithProperties';
export type { ModelWithReference } from './models/ModelWithReference';
export type { ModelWithString } from './models/ModelWithString';
export type { MultilineComment } from './models/MultilineComment';
export type { SimpleBoolean } from './models/SimpleBoolean';
export type { SimpleFile } from './models/SimpleFile';
export type { SimpleInteger } from './models/SimpleInteger';
export type { SimpleReference } from './models/SimpleReference';
export type { SimpleString } from './models/SimpleString';
export type { SimpleStringWithPattern } from './models/SimpleStringWithPattern';

export { CollectionFormatServiceUrl } from './services/CollectionFormatService';
export { ComplexServiceUrl } from './services/ComplexService';
export { DefaultsServiceUrl } from './services/DefaultsService';
export { DuplicateServiceUrl } from './services/DuplicateService';
export { ErrorServiceUrl } from './services/ErrorService';
export { HeaderServiceUrl } from './services/HeaderService';
export { MultipleTags1ServiceUrl } from './services/MultipleTags1Service';
export { MultipleTags2ServiceUrl } from './services/MultipleTags2Service';
export { MultipleTags3ServiceUrl } from './services/MultipleTags3Service';
export { NoContentServiceUrl } from './services/NoContentService';
export { ParametersServiceUrl } from './services/ParametersService';
export { ResponseServiceUrl } from './services/ResponseService';
export { SimpleServiceUrl } from './services/SimpleService';
export { TypesServiceUrl } from './services/TypesService';
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ArrayWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a simple array containing an array
 */
export type ArrayWithArray = Array<Array<ModelWithString>>;"
`;

exports[`v2 should generate: ./test/generated/v2/models/ArrayWithBooleans.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with booleans
 */
export type ArrayWithBooleans = Array<boolean>;"
`;

exports[`v2 should generate: ./test/generated/v2/models/ArrayWithNumbers.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with numbers
 */
export type ArrayWithNumbers = Array<number>;"
`;

exports[`v2 should generate: ./test/generated/v2/models/ArrayWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with properties
 */
export type ArrayWithProperties = Array<{
    foo?: string;
    bar?: string;
}>;"
`;

exports[`v2 should generate: ./test/generated/v2/models/ArrayWithReferences.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a simple array with references
 */
export type ArrayWithReferences = Array<ModelWithString>;"
`;

exports[`v2 should generate: ./test/generated/v2/models/ArrayWithStrings.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with strings
 */
export type ArrayWithStrings = Array<string>;"
`;

exports[`v2 should generate: ./test/generated/v2/models/Date.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a type-only model that defines Date as a string
 */
export type Date = string;"
`;

exports[`v2 should generate: ./test/generated/v2/models/DictionaryWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a complex dictionary
 */
export type DictionaryWithArray = Record<string, Array<ModelWithString>>;"
`;

exports[`v2 should generate: ./test/generated/v2/models/DictionaryWithDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a string dictionary
 */
export type DictionaryWithDictionary = Record<string, Record<string, string>>;"
`;

exports[`v2 should generate: ./test/generated/v2/models/DictionaryWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a complex dictionary
 */
export type DictionaryWithProperties = Record<string, {
    foo?: string;
    bar?: string;
}>;"
`;

exports[`v2 should generate: ./test/generated/v2/models/DictionaryWithReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a string reference
 */
export type DictionaryWithReference = Record<string, ModelWithString>;"
`;

exports[`v2 should generate: ./test/generated/v2/models/DictionaryWithString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a string dictionary
 */
export type DictionaryWithString = Record<string, string>;"
`;

exports[`v2 should generate: ./test/generated/v2/models/EnumFromDescription.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Success=1,Warning=2,Error=3
 */
export type EnumFromDescription = number;"
`;

exports[`v2 should generate: ./test/generated/v2/models/EnumWithExtensions.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with numbers
 */
export enum EnumWithExtensions {
    /**
     * Used when the status of something is successful
     */
    CUSTOM_SUCCESS = 200,
    /**
     * Used when the status of something has a warning
     */
    CUSTOM_WARNING = 400,
    /**
     * Used when the status of something has an error
     */
    CUSTOM_ERROR = 500,
}"
`;

exports[`v2 should generate: ./test/generated/v2/models/EnumWithNumbers.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with numbers
 */
export enum EnumWithNumbers {
    '_1' = 1,
    '_2' = 2,
    '_3' = 3,
    '_1.1' = 1.1,
    '_1.2' = 1.2,
    '_1.3' = 1.3,
    '_100' = 100,
    '_200' = 200,
    '_300' = 300,
    '_-100' = -100,
    '_-200' = -200,
    '_-300' = -300,
    '_-1.1' = -1.1,
    '_-1.2' = -1.2,
    '_-1.3' = -1.3,
}"
`;

exports[`v2 should generate: ./test/generated/v2/models/EnumWithStrings.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with strings
 */
export enum EnumWithStrings {
    SUCCESS = 'Success',
    WARNING = 'Warning',
    ERROR = 'Error',
}"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelThatExtends.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model that extends another model
 */
export type ModelThatExtends = (ModelWithString & {
    propExtendsA?: string;
    propExtendsB?: ModelWithString;
});
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelThatExtendsExtends.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelThatExtends } from './ModelThatExtends';
import type { ModelWithString } from './ModelWithString';

/**
 * This is a model that extends another model
 */
export type ModelThatExtendsExtends = (ModelWithString & ModelThatExtends & {
    propExtendsC?: string;
    propExtendsD?: ModelWithString;
});
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with one property containing an array
 */
export type ModelWithArray = {
    prop?: Array<ModelWithString>;
    propWithFile?: Array<Blob>;
    propWithNumber?: Array<number>;
}
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithBoolean.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one boolean property
 */
export type ModelWithBoolean = {
    /**
     * This is a simple boolean property
     */
    prop?: boolean;
}
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithCircularReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one property containing a circular reference
 */
export type ModelWithCircularReference = {
    prop?: ModelWithCircularReference;
}
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one property containing a dictionary
 */
export type ModelWithDictionary = {
    prop?: Record<string, string>;
}
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithDuplicateImports.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with duplicated imports
 */
export type ModelWithDuplicateImports = {
    propA?: ModelWithString;
    propB?: ModelWithString;
    propC?: ModelWithString;
}
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithDuplicateProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with duplicated properties
 */
export type ModelWithDuplicateProperties = {
    prop?: ModelWithString;
}
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithEnum.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one enum
 */
export type ModelWithEnum = {
    /**
     * This is a simple enum with strings
     */
    test?: ModelWithEnum.test;
    /**
     * These are the HTTP error code enums
     */
    statusCode?: ModelWithEnum.statusCode;
    /**
     * Simple boolean enum
     */
    bool?: boolean;
}

export namespace ModelWithEnum {

    /**
     * This is a simple enum with strings
     */
    export enum test {
        SUCCESS = 'Success',
        WARNING = 'Warning',
        ERROR = 'Error',
    }

    /**
     * These are the HTTP error code enums
     */
    export enum statusCode {
        _100 = '100',
        _200_FOO = '200 FOO',
        _300_FOO_BAR = '300 FOO_BAR',
        _400_FOO_BAR = '400 foo-bar',
        _500_FOO_BAR = '500 foo.bar',
        _600_FOO_BAR = '600 foo&bar',
    }


}
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithEnumFromDescription.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one enum
 */
export type ModelWithEnumFromDescription = {
    /**
     * Success=1,Warning=2,Error=3
     */
    test?: ModelWithEnumFromDescription.test;
}

export namespace ModelWithEnumFromDescription {

    /**
     * Success=1,Warning=2,Error=3
     */
    export enum test {
        SUCCESS = 1,
        WARNING = 2,
        ERROR = 3,
    }


}
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithInteger.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one number property
 */
export type ModelWithInteger = {
    /**
     * This is a simple number property
     */
    prop?: number;
}
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithNestedEnums.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with nested enums
 */
export type ModelWithNestedEnums = {
    dictionaryWithEnum?: Record<string, 'Success' | 'Warning' | 'Error'>;
    dictionaryWithEnumFromDescription?: Record<string, 1 | 2 | 3>;
    arrayWithEnum?: Array<'Success' | 'Warning' | 'Error'>;
    arrayWithDescription?: Array<1 | 2 | 3>;
}
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithNestedProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one nested property
 */
export type ModelWithNestedProperties = {
    readonly first: {
        readonly second: {
            readonly third: string;
        };
    };
}
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithNullableString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one string property
 */
export type ModelWithNullableString = {
    /**
     * This is a simple string property
     */
    nullableProp?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp: string | null;
}
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithOrderedProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with ordered properties
 */
export type ModelWithOrderedProperties = {
    zebra?: string;
    apple?: string;
    hawaii?: string;
}
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithPattern.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model that contains a some patterns
 */
export type ModelWithPattern = {
    key: string;
    name: string;
    readonly enabled?: boolean;
    readonly modified?: string;
    id?: string;
    text?: string;
}
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with one nested property
 */
export type ModelWithProperties = {
    required: string;
    readonly requiredAndReadOnly: string;
    string?: string;
    number?: number;
    boolean?: boolean;
    reference?: ModelWithString;
    'property with space'?: string;
    default?: string;
    try?: string;
    readonly '@namespace.string'?: string;
    readonly '@namespace.integer'?: number;
}
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithProperties } from './ModelWithProperties';

/**
 * This is a model with one property containing a reference
 */
export type ModelWithReference = {
    prop?: ModelWithProperties;
}
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one string property
 */
export type ModelWithString = {
    /**
     * This is a simple string property
     */
    prop?: string;
}
"
`;

exports[`v2 should generate: ./test/generated/v2/models/MultilineComment.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing multiline comments.
 * This must go to the next line.
 *
 * This will contain a break.
 */
export type MultilineComment = number;"
`;

exports[`v2 should generate: ./test/generated/v2/models/SimpleBoolean.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple boolean
 */
export type SimpleBoolean = boolean;"
`;

exports[`v2 should generate: ./test/generated/v2/models/SimpleFile.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple file
 */
export type SimpleFile = Blob;"
`;

exports[`v2 should generate: ./test/generated/v2/models/SimpleInteger.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple number
 */
export type SimpleInteger = number;"
`;

exports[`v2 should generate: ./test/generated/v2/models/SimpleReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a simple reference
 */
export type SimpleReference = ModelWithString;"
`;

exports[`v2 should generate: ./test/generated/v2/models/SimpleString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple string
 */
export type SimpleString = string;"
`;

exports[`v2 should generate: ./test/generated/v2/models/SimpleStringWithPattern.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple string
 */
export type SimpleStringWithPattern = string;"
`;

exports[`v2 should generate: ./test/generated/v2/services/CollectionFormatService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const CollectionFormatServiceUrl = {
    CollectionFormat: '/api/v\${OpenAPI.VERSION}/collectionFormat',
}

/**
 */
export interface CollectionFormat {
    response:
    request: {
        query: {
            parameterArrayCsv: Array<string>
            parameterArraySsv: Array<string>
            parameterArrayTsv: Array<string>
            parameterArrayPipes: Array<string>
            parameterArrayMulti: Array<string>
        }
    }
}

"
`;

exports[`v2 should generate: ./test/generated/v2/services/ComplexService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';

export const ComplexServiceUrl = {
    ComplexTypes: '/api/v\${OpenAPI.VERSION}/complex',
}

/**
 */
export interface ComplexTypes {
    response: ModelWithString
    request: {
        query: {
            parameterObject: {
                first?: {
                    second?: {
                        third?: string;
                    };
                };
            }
            parameterReference: ModelWithString
        }
    }
}

"
`;

exports[`v2 should generate: ./test/generated/v2/services/DefaultsService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';

export const DefaultsServiceUrl = {
    CallWithDefaultParameters: '/api/v\${OpenAPI.VERSION}/defaults',
    CallWithDefaultOptionalParameters: '/api/v\${OpenAPI.VERSION}/defaults',
    CallToTestOrderOfParams: '/api/v\${OpenAPI.VERSION}/defaults',
}

/**
 * @type parameterString = 'Hello World!'
 * @type parameterNumber = 123
 * @type parameterBoolean = true
 * @type parameterEnum = 'Success'
 * @type parameterModel = {
    \\"prop\\": \\"Hello World!\\"
}
 */
export interface CallWithDefaultParameters {
    response:
    request: {
        query: {
            parameterString: string
            parameterNumber: number
            parameterBoolean: boolean
            parameterEnum: 'Success' | 'Warning' | 'Error'
            parameterModel: ModelWithString
        }
    }
}

/**
 * @type parameterString = 'Hello World!'
 * @type parameterNumber = 123
 * @type parameterBoolean = true
 * @type parameterEnum = 'Success'
 * @type parameterModel = {
    \\"prop\\": \\"Hello World!\\"
}
 */
export interface CallWithDefaultOptionalParameters {
    response:
    request: {
        query: {
            parameterString: string
            parameterNumber: number
            parameterBoolean: boolean
            parameterEnum: 'Success' | 'Warning' | 'Error'
            parameterModel: ModelWithString
        }
    }
}

/**
 * @type parameterOptionalStringWithDefault = 'Hello World!'
 * @type parameterOptionalStringWithEmptyDefault = ''
 * @type parameterStringWithDefault = 'Hello World!'
 * @type parameterStringWithEmptyDefault = ''
 * @type parameterStringNullableWithDefault = null
 */
export interface CallToTestOrderOfParams {
    response:
    request: {
        query: {
            parameterStringWithNoDefault: string
            parameterOptionalStringWithDefault: string
            parameterOptionalStringWithEmptyDefault: string
            parameterOptionalStringWithNoDefault?: string
            parameterStringWithDefault: string
            parameterStringWithEmptyDefault: string
            parameterStringNullableWithNoDefault?: string | null
            parameterStringNullableWithDefault: string | null
        }
    }
}

"
`;

exports[`v2 should generate: ./test/generated/v2/services/DuplicateService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const DuplicateServiceUrl = {
}

"
`;

exports[`v2 should generate: ./test/generated/v2/services/ErrorService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const ErrorServiceUrl = {
    TestErrorCode: '/api/v\${OpenAPI.VERSION}/error',
}

/**
 */
export interface TestErrorCode {
    response: any
    request: {
        query: {
            status: string
        }
    }
}

"
`;

exports[`v2 should generate: ./test/generated/v2/services/HeaderService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const HeaderServiceUrl = {
}

"
`;

exports[`v2 should generate: ./test/generated/v2/services/MultipleTags1Service.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const MultipleTags1ServiceUrl = {
}

"
`;

exports[`v2 should generate: ./test/generated/v2/services/MultipleTags2Service.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const MultipleTags2ServiceUrl = {
}

"
`;

exports[`v2 should generate: ./test/generated/v2/services/MultipleTags3Service.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const MultipleTags3ServiceUrl = {
}

"
`;

exports[`v2 should generate: ./test/generated/v2/services/NoContentService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const NoContentServiceUrl = {
}

"
`;

exports[`v2 should generate: ./test/generated/v2/services/ParametersService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const ParametersServiceUrl = {
    CallWithParameters: ({
        parameterPath,
    }: {
        parameterPath: string
    }) => \`/api/v\${OpenAPI.VERSION}/parameters/\${parameterPath}\`,
    CallWithWeirdParameterNames: ({
        parameterPath1?,
        parameterPath2?,
        parameterPath3?,
    }: {
        parameterPath1?: string
        parameterPath2?: string
        parameterPath3?: string
    }) => \`/api/v\${OpenAPI.VERSION}/parameters/\${parameterPath1}/\${parameterPath2}/\${parameterPath3}\`,
}

/**
 */
export interface CallWithParameters {
    response:
    request: {
        path: {
            parameterPath: string
        }
        query: {
            parameterQuery: string
        }
        body: {
            parameterBody: string
        }
    }
}

/**
 */
export interface CallWithWeirdParameterNames {
    response:
    request: {
        path: {
            parameterPath1?: string
            parameterPath2?: string
            parameterPath3?: string
        }
        query: {
            parameterQuery: string
            _default?: string
        }
        body: {
            parameterBody: string
        }
    }
}

"
`;

exports[`v2 should generate: ./test/generated/v2/services/ResponseService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelThatExtends } from '../models/ModelThatExtends';
import type { ModelThatExtendsExtends } from '../models/ModelThatExtendsExtends';
import type { ModelWithString } from '../models/ModelWithString';

export const ResponseServiceUrl = {
}

"
`;

exports[`v2 should generate: ./test/generated/v2/services/SimpleService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const SimpleServiceUrl = {
}

"
`;

exports[`v2 should generate: ./test/generated/v2/services/TypesService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const TypesServiceUrl = {
    Types: ({
        id?,
    }: {
        id?: number
    }) => \`/api/v\${OpenAPI.VERSION}/types\`,
}

/**
 * @type parameterNumber = 123
 * @type parameterString = 'default'
 * @type parameterBoolean = true
 * @type parameterObject = null
 */
export interface Types {
    response: number | string | boolean
    request: {
        path: {
            id?: number
        }
        query: {
            parameterArray: Array<string>
            parameterDictionary: Record<string, string>
            parameterEnum: 'Success' | 'Warning' | 'Error'
            parameterNumber: number
            parameterString: string
            parameterBoolean: boolean
            parameterObject: any
        }
    }
}

"
`;

exports[`v3 should generate: ./test/generated/v3/index.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type { ArrayWithArray } from './models/ArrayWithArray';
export type { ArrayWithBooleans } from './models/ArrayWithBooleans';
export type { ArrayWithNumbers } from './models/ArrayWithNumbers';
export type { ArrayWithProperties } from './models/ArrayWithProperties';
export type { ArrayWithReferences } from './models/ArrayWithReferences';
export type { ArrayWithStrings } from './models/ArrayWithStrings';
export type { CompositionBaseModel } from './models/CompositionBaseModel';
export type { CompositionExtendedModel } from './models/CompositionExtendedModel';
export type { CompositionWithAllOfAndNullable } from './models/CompositionWithAllOfAndNullable';
export type { CompositionWithAnyOf } from './models/CompositionWithAnyOf';
export type { CompositionWithAnyOfAndNullable } from './models/CompositionWithAnyOfAndNullable';
export type { CompositionWithAnyOfAnonymous } from './models/CompositionWithAnyOfAnonymous';
export type { CompositionWithOneOf } from './models/CompositionWithOneOf';
export type { CompositionWithOneOfAndNullable } from './models/CompositionWithOneOfAndNullable';
export type { CompositionWithOneOfAnonymous } from './models/CompositionWithOneOfAnonymous';
export type { DictionaryWithArray } from './models/DictionaryWithArray';
export type { DictionaryWithDictionary } from './models/DictionaryWithDictionary';
export type { DictionaryWithProperties } from './models/DictionaryWithProperties';
export type { DictionaryWithReference } from './models/DictionaryWithReference';
export type { DictionaryWithString } from './models/DictionaryWithString';
export type { EnumFromDescription } from './models/EnumFromDescription';
export { EnumWithExtensions } from './models/EnumWithExtensions';
export { EnumWithNumbers } from './models/EnumWithNumbers';
export { EnumWithStrings } from './models/EnumWithStrings';
export type { ModelThatExtends } from './models/ModelThatExtends';
export type { ModelThatExtendsExtends } from './models/ModelThatExtendsExtends';
export type { ModelWithArray } from './models/ModelWithArray';
export type { ModelWithBoolean } from './models/ModelWithBoolean';
export type { ModelWithCircularReference } from './models/ModelWithCircularReference';
export type { ModelWithDictionary } from './models/ModelWithDictionary';
export type { ModelWithDuplicateImports } from './models/ModelWithDuplicateImports';
export type { ModelWithDuplicateProperties } from './models/ModelWithDuplicateProperties';
export { ModelWithEnum } from './models/ModelWithEnum';
export { ModelWithEnumFromDescription } from './models/ModelWithEnumFromDescription';
export type { ModelWithInteger } from './models/ModelWithInteger';
export type { ModelWithNestedEnums } from './models/ModelWithNestedEnums';
export type { ModelWithNestedProperties } from './models/ModelWithNestedProperties';
export type { ModelWithNullableString } from './models/ModelWithNullableString';
export type { ModelWithOrderedProperties } from './models/ModelWithOrderedProperties';
export type { ModelWithPattern } from './models/ModelWithPattern';
export type { ModelWithProperties } from './models/ModelWithProperties';
export type { ModelWithReference } from './models/ModelWithReference';
export type { ModelWithString } from './models/ModelWithString';
export type { MultilineComment } from './models/MultilineComment';
export type { SimpleBoolean } from './models/SimpleBoolean';
export type { SimpleFile } from './models/SimpleFile';
export type { SimpleInteger } from './models/SimpleInteger';
export type { SimpleReference } from './models/SimpleReference';
export type { SimpleString } from './models/SimpleString';
export type { SimpleStringWithPattern } from './models/SimpleStringWithPattern';

export { CollectionFormatServiceUrl } from './services/CollectionFormatService';
export { ComplexServiceUrl } from './services/ComplexService';
export { DefaultsServiceUrl } from './services/DefaultsService';
export { DuplicateServiceUrl } from './services/DuplicateService';
export { ErrorServiceUrl } from './services/ErrorService';
export { FormDataServiceUrl } from './services/FormDataService';
export { HeaderServiceUrl } from './services/HeaderService';
export { MultipartServiceUrl } from './services/MultipartService';
export { MultipleTags1ServiceUrl } from './services/MultipleTags1Service';
export { MultipleTags2ServiceUrl } from './services/MultipleTags2Service';
export { MultipleTags3ServiceUrl } from './services/MultipleTags3Service';
export { NoContentServiceUrl } from './services/NoContentService';
export { ParametersServiceUrl } from './services/ParametersService';
export { RequestBodyServiceUrl } from './services/RequestBodyService';
export { ResponseServiceUrl } from './services/ResponseService';
export { SimpleServiceUrl } from './services/SimpleService';
export { TypesServiceUrl } from './services/TypesService';
export { UploadServiceUrl } from './services/UploadService';
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ArrayWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a simple array containing an array
 */
export type ArrayWithArray = Array<Array<ModelWithString>>;"
`;

exports[`v3 should generate: ./test/generated/v3/models/ArrayWithBooleans.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with booleans
 */
export type ArrayWithBooleans = Array<boolean>;"
`;

exports[`v3 should generate: ./test/generated/v3/models/ArrayWithNumbers.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with numbers
 */
export type ArrayWithNumbers = Array<number>;"
`;

exports[`v3 should generate: ./test/generated/v3/models/ArrayWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with properties
 */
export type ArrayWithProperties = Array<{
    foo?: string;
    bar?: string;
}>;"
`;

exports[`v3 should generate: ./test/generated/v3/models/ArrayWithReferences.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a simple array with references
 */
export type ArrayWithReferences = Array<ModelWithString>;"
`;

exports[`v3 should generate: ./test/generated/v3/models/ArrayWithStrings.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with strings
 */
export type ArrayWithStrings = Array<string>;"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionBaseModel.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a base model with two simple optional properties
 */
export type CompositionBaseModel = {
    firstName?: string;
    lastname?: string;
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionExtendedModel.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { CompositionBaseModel } from './CompositionBaseModel';

/**
 * This is a model that extends the base model
 */
export type CompositionExtendedModel = (CompositionBaseModel & {
    firstName: string;
    lastname: string;
    age: number;
});
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithAllOfAndNullable.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';

/**
 * This is a model with one property with a 'all of' relationship
 */
export type CompositionWithAllOfAndNullable = {
    propA?: ({
        boolean?: boolean;
    } & ModelWithEnum & ModelWithArray & ModelWithDictionary) | null;
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithAnyOf.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';
import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with one property with a 'any of' relationship
 */
export type CompositionWithAnyOf = {
    propA?: (ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary);
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithAnyOfAndNullable.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';

/**
 * This is a model with one property with a 'any of' relationship
 */
export type CompositionWithAnyOfAndNullable = {
    propA?: ({
        boolean?: boolean;
    } | ModelWithEnum | ModelWithArray | ModelWithDictionary) | null;
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithAnyOfAnonymous.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one property with a 'any of' relationship where the options are not $ref
 */
export type CompositionWithAnyOfAnonymous = {
    propA?: ({
        propA?: string;
    } | string | number);
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithOneOf.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';
import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with one property with a 'one of' relationship
 */
export type CompositionWithOneOf = {
    propA?: (ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary);
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithOneOfAndNullable.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';

/**
 * This is a model with one property with a 'one of' relationship
 */
export type CompositionWithOneOfAndNullable = {
    propA?: ({
        boolean?: boolean;
    } | ModelWithEnum | ModelWithArray | ModelWithDictionary) | null;
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithOneOfAnonymous.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one property with a 'one of' relationship where the options are not $ref
 */
export type CompositionWithOneOfAnonymous = {
    propA?: ({
        propA?: string;
    } | string | number);
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/DictionaryWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a complex dictionary
 */
export type DictionaryWithArray = Record<string, Array<ModelWithString>>;"
`;

exports[`v3 should generate: ./test/generated/v3/models/DictionaryWithDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a string dictionary
 */
export type DictionaryWithDictionary = Record<string, Record<string, string>>;"
`;

exports[`v3 should generate: ./test/generated/v3/models/DictionaryWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a complex dictionary
 */
export type DictionaryWithProperties = Record<string, {
    foo?: string;
    bar?: string;
}>;"
`;

exports[`v3 should generate: ./test/generated/v3/models/DictionaryWithReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a string reference
 */
export type DictionaryWithReference = Record<string, ModelWithString>;"
`;

exports[`v3 should generate: ./test/generated/v3/models/DictionaryWithString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a string dictionary
 */
export type DictionaryWithString = Record<string, string>;"
`;

exports[`v3 should generate: ./test/generated/v3/models/EnumFromDescription.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Success=1,Warning=2,Error=3
 */
export type EnumFromDescription = number;"
`;

exports[`v3 should generate: ./test/generated/v3/models/EnumWithExtensions.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with numbers
 */
export enum EnumWithExtensions {
    /**
     * Used when the status of something is successful
     */
    CUSTOM_SUCCESS = 200,
    /**
     * Used when the status of something has a warning
     */
    CUSTOM_WARNING = 400,
    /**
     * Used when the status of something has an error
     */
    CUSTOM_ERROR = 500,
}"
`;

exports[`v3 should generate: ./test/generated/v3/models/EnumWithNumbers.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with numbers
 */
export enum EnumWithNumbers {
    '_1' = 1,
    '_2' = 2,
    '_3' = 3,
    '_1.1' = 1.1,
    '_1.2' = 1.2,
    '_1.3' = 1.3,
    '_100' = 100,
    '_200' = 200,
    '_300' = 300,
    '_-100' = -100,
    '_-200' = -200,
    '_-300' = -300,
    '_-1.1' = -1.1,
    '_-1.2' = -1.2,
    '_-1.3' = -1.3,
}"
`;

exports[`v3 should generate: ./test/generated/v3/models/EnumWithStrings.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with strings
 */
export enum EnumWithStrings {
    SUCCESS = 'Success',
    WARNING = 'Warning',
    ERROR = 'Error',
}"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelThatExtends.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model that extends another model
 */
export type ModelThatExtends = (ModelWithString & {
    propExtendsA?: string;
    propExtendsB?: ModelWithString;
});
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelThatExtendsExtends.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelThatExtends } from './ModelThatExtends';
import type { ModelWithString } from './ModelWithString';

/**
 * This is a model that extends another model
 */
export type ModelThatExtendsExtends = (ModelWithString & ModelThatExtends & {
    propExtendsC?: string;
    propExtendsD?: ModelWithString;
});
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with one property containing an array
 */
export type ModelWithArray = {
    prop?: Array<ModelWithString>;
    propWithFile?: Array<Blob>;
    propWithNumber?: Array<number>;
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithBoolean.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one boolean property
 */
export type ModelWithBoolean = {
    /**
     * This is a simple boolean property
     */
    prop?: boolean;
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithCircularReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one property containing a circular reference
 */
export type ModelWithCircularReference = {
    prop?: ModelWithCircularReference;
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one property containing a dictionary
 */
export type ModelWithDictionary = {
    prop?: Record<string, string>;
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithDuplicateImports.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with duplicated imports
 */
export type ModelWithDuplicateImports = {
    propA?: ModelWithString;
    propB?: ModelWithString;
    propC?: ModelWithString;
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithDuplicateProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with duplicated properties
 */
export type ModelWithDuplicateProperties = {
    prop?: ModelWithString;
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithEnum.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one enum
 */
export type ModelWithEnum = {
    /**
     * This is a simple enum with strings
     */
    test?: ModelWithEnum.test;
    /**
     * These are the HTTP error code enums
     */
    statusCode?: ModelWithEnum.statusCode;
    /**
     * Simple boolean enum
     */
    bool?: boolean;
}

export namespace ModelWithEnum {

    /**
     * This is a simple enum with strings
     */
    export enum test {
        SUCCESS = 'Success',
        WARNING = 'Warning',
        ERROR = 'Error',
    }

    /**
     * These are the HTTP error code enums
     */
    export enum statusCode {
        _100 = '100',
        _200_FOO = '200 FOO',
        _300_FOO_BAR = '300 FOO_BAR',
        _400_FOO_BAR = '400 foo-bar',
        _500_FOO_BAR = '500 foo.bar',
        _600_FOO_BAR = '600 foo&bar',
    }


}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithEnumFromDescription.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one enum
 */
export type ModelWithEnumFromDescription = {
    /**
     * Success=1,Warning=2,Error=3
     */
    test?: ModelWithEnumFromDescription.test;
}

export namespace ModelWithEnumFromDescription {

    /**
     * Success=1,Warning=2,Error=3
     */
    export enum test {
        SUCCESS = 1,
        WARNING = 2,
        ERROR = 3,
    }


}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithInteger.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one number property
 */
export type ModelWithInteger = {
    /**
     * This is a simple number property
     */
    prop?: number;
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithNestedEnums.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with nested enums
 */
export type ModelWithNestedEnums = {
    dictionaryWithEnum?: Record<string, 'Success' | 'Warning' | 'Error'>;
    dictionaryWithEnumFromDescription?: Record<string, 1 | 2 | 3>;
    arrayWithEnum?: Array<'Success' | 'Warning' | 'Error'>;
    arrayWithDescription?: Array<1 | 2 | 3>;
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithNestedProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one nested property
 */
export type ModelWithNestedProperties = {
    readonly first: {
        readonly second: {
            readonly third: string | null;
        } | null;
    } | null;
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithNullableString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one string property
 */
export type ModelWithNullableString = {
    /**
     * This is a simple string property
     */
    nullableProp1?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp1: string | null;
    /**
     * This is a simple string property
     */
    nullableProp2?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp2: string | null;
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithOrderedProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with ordered properties
 */
export type ModelWithOrderedProperties = {
    zebra?: string;
    apple?: string;
    hawaii?: string;
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithPattern.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model that contains a some patterns
 */
export type ModelWithPattern = {
    key: string;
    name: string;
    readonly enabled?: boolean;
    readonly modified?: string;
    id?: string;
    text?: string;
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with one nested property
 */
export type ModelWithProperties = {
    required: string;
    readonly requiredAndReadOnly: string;
    requiredAndNullable: string | null;
    string?: string;
    number?: number;
    boolean?: boolean;
    reference?: ModelWithString;
    'property with space'?: string;
    default?: string;
    try?: string;
    readonly '@namespace.string'?: string;
    readonly '@namespace.integer'?: number;
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithProperties } from './ModelWithProperties';

/**
 * This is a model with one property containing a reference
 */
export type ModelWithReference = {
    prop?: ModelWithProperties;
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one string property
 */
export type ModelWithString = {
    /**
     * This is a simple string property
     */
    prop?: string;
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/MultilineComment.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing multiline comments.
 * This must go to the next line.
 *
 * This will contain a break.
 */
export type MultilineComment = number;"
`;

exports[`v3 should generate: ./test/generated/v3/models/SimpleBoolean.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple boolean
 */
export type SimpleBoolean = boolean;"
`;

exports[`v3 should generate: ./test/generated/v3/models/SimpleFile.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple file
 */
export type SimpleFile = Blob;"
`;

exports[`v3 should generate: ./test/generated/v3/models/SimpleInteger.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple number
 */
export type SimpleInteger = number;"
`;

exports[`v3 should generate: ./test/generated/v3/models/SimpleReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a simple reference
 */
export type SimpleReference = ModelWithString;"
`;

exports[`v3 should generate: ./test/generated/v3/models/SimpleString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple string
 */
export type SimpleString = string;"
`;

exports[`v3 should generate: ./test/generated/v3/models/SimpleStringWithPattern.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple string
 */
export type SimpleStringWithPattern = string | null;"
`;

exports[`v3 should generate: ./test/generated/v3/services/CollectionFormatService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const CollectionFormatServiceUrl = {
    CollectionFormat: '/api/v\${OpenAPI.VERSION}/collectionFormat',
}

/**
 */
export interface CollectionFormat {
    response:
    request: {
        query: {
            parameterArrayCsv: Array<string> | null
            parameterArraySsv: Array<string> | null
            parameterArrayTsv: Array<string> | null
            parameterArrayPipes: Array<string> | null
            parameterArrayMulti: Array<string> | null
        }
    }
}

"
`;

exports[`v3 should generate: ./test/generated/v3/services/ComplexService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithArray } from '../models/ModelWithArray';
import type { ModelWithDictionary } from '../models/ModelWithDictionary';
import type { ModelWithEnum } from '../models/ModelWithEnum';
import type { ModelWithString } from '../models/ModelWithString';

export const ComplexServiceUrl = {
    ComplexTypes: '/api/v\${OpenAPI.VERSION}/complex',
    ComplexParams: ({
        id,
    }: {
        id: number
    }) => \`/api/v\${OpenAPI.VERSION}/complex/\${id}\`,
}

/**
 */
export interface ComplexTypes {
    response: ModelWithString
    request: {
        query: {
            parameterObject: {
                first?: {
                    second?: {
                        third?: string;
                    };
                };
            }
            parameterReference: ModelWithString
        }
    }
}

/**
 */
export interface ComplexParams {
    response: ModelWithString
    request: {
        path: {
            id: number
        }
        body: {
            requestBody?: {
                readonly key: string | null;
                name: string | null;
                enabled?: boolean;
                readonly type: 'Monkey' | 'Horse' | 'Bird';
                listOfModels?: Array<ModelWithString> | null;
                listOfStrings?: Array<string> | null;
                parameters: (ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary);
                readonly user?: {
                    readonly id?: number;
                    readonly name?: string | null;
                };
            }
        }
    }
}

"
`;

exports[`v3 should generate: ./test/generated/v3/services/DefaultsService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';

export const DefaultsServiceUrl = {
    CallWithDefaultParameters: '/api/v\${OpenAPI.VERSION}/defaults',
    CallWithDefaultOptionalParameters: '/api/v\${OpenAPI.VERSION}/defaults',
    CallToTestOrderOfParams: '/api/v\${OpenAPI.VERSION}/defaults',
}

/**
 * @type parameterString = 'Hello World!'
 * @type parameterNumber = 123
 * @type parameterBoolean = true
 * @type parameterEnum = 'Success'
 * @type parameterModel = {
    \\"prop\\": \\"Hello World!\\"
}
 */
export interface CallWithDefaultParameters {
    response:
    request: {
        query: {
            parameterString: string | null
            parameterNumber: number | null
            parameterBoolean: boolean | null
            parameterEnum: 'Success' | 'Warning' | 'Error'
            parameterModel: ModelWithString | null
        }
    }
}

/**
 * @type parameterString = 'Hello World!'
 * @type parameterNumber = 123
 * @type parameterBoolean = true
 * @type parameterEnum = 'Success'
 * @type parameterModel = {
    \\"prop\\": \\"Hello World!\\"
}
 */
export interface CallWithDefaultOptionalParameters {
    response:
    request: {
        query: {
            parameterString: string
            parameterNumber: number
            parameterBoolean: boolean
            parameterEnum: 'Success' | 'Warning' | 'Error'
            parameterModel: ModelWithString
        }
    }
}

/**
 * @type parameterOptionalStringWithDefault = 'Hello World!'
 * @type parameterOptionalStringWithEmptyDefault = ''
 * @type parameterStringWithDefault = 'Hello World!'
 * @type parameterStringWithEmptyDefault = ''
 * @type parameterStringNullableWithDefault = null
 */
export interface CallToTestOrderOfParams {
    response:
    request: {
        query: {
            parameterStringWithNoDefault: string
            parameterOptionalStringWithDefault: string
            parameterOptionalStringWithEmptyDefault: string
            parameterOptionalStringWithNoDefault?: string
            parameterStringWithDefault: string
            parameterStringWithEmptyDefault: string
            parameterStringNullableWithNoDefault?: string | null
            parameterStringNullableWithDefault: string | null
        }
    }
}

"
`;

exports[`v3 should generate: ./test/generated/v3/services/DuplicateService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const DuplicateServiceUrl = {
}

"
`;

exports[`v3 should generate: ./test/generated/v3/services/ErrorService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const ErrorServiceUrl = {
    TestErrorCode: '/api/v\${OpenAPI.VERSION}/error',
}

/**
 */
export interface TestErrorCode {
    response: any
    request: {
        query: {
            status: number
        }
    }
}

"
`;

exports[`v3 should generate: ./test/generated/v3/services/FormDataService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';

export const FormDataServiceUrl = {
    PostFormData: '/api/v\${OpenAPI.VERSION}/formData/',
}

/**
 */
export interface PostFormData {
    response:
    request: {
        query: {
            parameter?: string
        }
    }
}

"
`;

exports[`v3 should generate: ./test/generated/v3/services/HeaderService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const HeaderServiceUrl = {
}

"
`;

exports[`v3 should generate: ./test/generated/v3/services/MultipartService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';

export const MultipartServiceUrl = {
    MultipartRequest: '/api/v\${OpenAPI.VERSION}/multipart',
}

/**
 */
export interface MultipartRequest {
    response:
    request: {
    }
}

"
`;

exports[`v3 should generate: ./test/generated/v3/services/MultipleTags1Service.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const MultipleTags1ServiceUrl = {
}

"
`;

exports[`v3 should generate: ./test/generated/v3/services/MultipleTags2Service.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const MultipleTags2ServiceUrl = {
}

"
`;

exports[`v3 should generate: ./test/generated/v3/services/MultipleTags3Service.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const MultipleTags3ServiceUrl = {
}

"
`;

exports[`v3 should generate: ./test/generated/v3/services/NoContentService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const NoContentServiceUrl = {
}

"
`;

exports[`v3 should generate: ./test/generated/v3/services/ParametersService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';

export const ParametersServiceUrl = {
    CallWithParameters: ({
        parameterPath,
    }: {
        parameterPath: string | null
    }) => \`/api/v\${OpenAPI.VERSION}/parameters/\${parameterPath}\`,
    CallWithWeirdParameterNames: ({
        parameterPath1?,
        parameterPath2?,
        parameterPath3?,
    }: {
        parameterPath1?: string
        parameterPath2?: string
        parameterPath3?: string
    }) => \`/api/v\${OpenAPI.VERSION}/parameters/\${parameterPath1}/\${parameterPath2}/\${parameterPath3}\`,
    GetCallWithOptionalParam: '/api/v\${OpenAPI.VERSION}/parameters/',
    PostCallWithOptionalParam: '/api/v\${OpenAPI.VERSION}/parameters/',
}

/**
 */
export interface CallWithParameters {
    response:
    request: {
        path: {
            parameterPath: string | null
        }
        query: {
            parameterQuery: string | null
        }
        body: {
            requestBody: ModelWithString | null
        }
    }
}

/**
 */
export interface CallWithWeirdParameterNames {
    response:
    request: {
        path: {
            parameterPath1?: string
            parameterPath2?: string
            parameterPath3?: string
        }
        query: {
            parameterQuery: string | null
            _default?: string
        }
        body: {
            requestBody: ModelWithString | null
        }
    }
}

/**
 */
export interface GetCallWithOptionalParam {
    response:
    request: {
        query: {
            parameter?: string
        }
        body: {
            requestBody: ModelWithString
        }
    }
}

/**
 */
export interface PostCallWithOptionalParam {
    response:
    request: {
        query: {
            parameter: string
        }
        body: {
            requestBody?: ModelWithString
        }
    }
}

"
`;

exports[`v3 should generate: ./test/generated/v3/services/RequestBodyService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';

export const RequestBodyServiceUrl = {
    PostRequestBody: '/api/v\${OpenAPI.VERSION}/requestBody/',
}

/**
 */
export interface PostRequestBody {
    response:
    request: {
        query: {
            parameter?: string
        }
        body: {
            requestBody?: ModelWithString
        }
    }
}

"
`;

exports[`v3 should generate: ./test/generated/v3/services/ResponseService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelThatExtends } from '../models/ModelThatExtends';
import type { ModelThatExtendsExtends } from '../models/ModelThatExtendsExtends';
import type { ModelWithString } from '../models/ModelWithString';

export const ResponseServiceUrl = {
}

"
`;

exports[`v3 should generate: ./test/generated/v3/services/SimpleService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const SimpleServiceUrl = {
}

"
`;

exports[`v3 should generate: ./test/generated/v3/services/TypesService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const TypesServiceUrl = {
    Types: ({
        id?,
    }: {
        id?: number
    }) => \`/api/v\${OpenAPI.VERSION}/types\`,
}

/**
 * @type parameterNumber = 123
 * @type parameterString = 'default'
 * @type parameterBoolean = true
 * @type parameterObject = null
 */
export interface Types {
    response: number | string | boolean
    request: {
        path: {
            id?: number
        }
        query: {
            parameterArray: Array<string> | null
            parameterDictionary: any
            parameterEnum: 'Success' | 'Warning' | 'Error' | null
            parameterNumber: number
            parameterString: string | null
            parameterBoolean: boolean | null
            parameterObject: any
        }
    }
}

"
`;

exports[`v3 should generate: ./test/generated/v3/services/UploadService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const UploadServiceUrl = {
    UploadFile: '/api/v\${OpenAPI.VERSION}/upload',
}

/**
 */
export interface UploadFile {
    response: boolean
    request: {
    }
}

"
`;
